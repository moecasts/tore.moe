---
import i18n, { t } from 'i18next';
import { badgeVariants } from '@/components/ui/badge';
import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { Empty, EmptyContent, EmptyHeader, EmptyMedia } from '@/components/ui/empty';
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';
import { cn } from '@/lib';
import { format } from '@/lib/date';
import { getFilterLink, getPaginateLink } from '@/lib/link';
import { buildPager } from '@/lib/pagination';
import type { PostWithLink } from '@/lib/posts';
import BlogLayout from './blog.astro';

interface Props {
  items: PostWithLink[];

  title?: string;
  baseLink: string;
  filters?: string[];
  filter?: string;

  pagination: {
    current: number;
    total: number;
  };
}

const props = Astro.props as Props;

const {
  items,
  title = '',
  pagination,

  baseLink,
  filter,
} = props;

const filters = props.filters || [];

const isFilterSelected = (currentFilter?: string) => {
  return (!currentFilter && !filter) || currentFilter === filter;
};

const makePaginateLink = (page: number) => {
  const link = filter
    ? getFilterLink({
        base: baseLink,
        filter: filter,
      })
    : baseLink;

  return getPaginateLink({ link, page });
};

const pagers = buildPager(pagination.current, pagination.total, makePaginateLink);
---

<BlogLayout content={{ title }}>
  {
    filters.length > 0 && (
      <div class="-mx-2 -mt-2 px-2 border-b-1 border-b-border">
        <div class="mx-auto p-6 max-w-3xl">
          <div class="flex flex-wrap items-center gap-2">
            <span class="mr-1 text-muted-foreground text-sm">{t('Filter')}</span>
            {baseLink && (
              <a
                href={baseLink}
                class={cn(
                  badgeVariants({
                    variant: isFilterSelected() ? 'default' : 'outline',
                  }),
                  'gap-1'
                )}
              >
                {t('All')}
              </a>
            )}
            {filters?.map((filter) => {
              return (
                <a
                  href={getFilterLink({
                    base: baseLink,
                    filter,
                  })}
                  class={cn(
                    badgeVariants({
                      variant: isFilterSelected(filter) ? 'default' : 'outline',
                    })
                  )}
                >
                  {filter}
                </a>
              );
            })}
          </div>
        </div>
      </div>
    )
  }
  <main class="mx-auto p-6 max-w-3xl">
    {
      items.length === 0 && (
        <Empty>
          <EmptyHeader>
            <EmptyMedia variant="icon">
              <span class="size-6 icon-[tabler--box-multiple]" />
            </EmptyMedia>
            <EmptyContent>{t('No data yet')}</EmptyContent>
          </EmptyHeader>
        </Empty>
      )
    }

    {
      items.length > 0 && (
        <div class="flex flex-col gap-6">
          {items.map((post) => {
            const title = post.data.title ?? post.slug;
            const date = format(post.data.date as Date, 'PPP');
            return (
              <Card className="gap-0 bg-background shadow-none hover:shadow-sm py-0 hover:border-border transition-shadow duration-200">
                {post.data.thumbnail && (
                  <a href={post.link} class="flex" tabindex="-1">
                    <img
                      src={post.data.thumbnail}
                      alt={post.data.title ?? post.slug}
                      class="rounded-t-xl w-full object-cover aspect-video sm:aspect-[2/1]"
                    />
                  </a>
                )}

                <CardContent className="p-4">
                  <a href={post.link} class="flex">
                    <span>{title}</span>
                  </a>
                </CardContent>

                <CardFooter className="px-4 pb-4">
                  <div class="flex items-center gap-2 text-muted-foreground">
                    <span class="text-md icon-[tabler--calendar]" />
                    <span class="text-sm">{date}</span>
                  </div>
                </CardFooter>
              </Card>
            );
          })}
        </div>
      )
    }

    {
      pagination.total > 1 && (
        <div class="mt-6">
          <Pagination>
            <PaginationContent>
              {pagers.map((pager) => {
                if (pager.disabled) {
                  return null;
                }
                if (pager.type === 'prev') {
                  return (
                    <PaginationItem>
                      <PaginationPrevious
                        href={pager.disabled ? undefined : pager.link}
                        aria-disabled={pager.disabled}
                        className="!px-2.5 rounded-full"
                      />
                    </PaginationItem>
                  );
                }
                if (pager.type === 'next') {
                  return (
                    <PaginationItem>
                      <PaginationNext
                        href={pager.disabled ? undefined : pager.link}
                        aria-disabled={pager.disabled}
                        className="!px-2.5 rounded-full"
                      />
                    </PaginationItem>
                  );
                }
                if (pager.type === 'ellipsis') {
                  return (
                    <PaginationItem>
                      <PaginationEllipsis />
                    </PaginationItem>
                  );
                }
                return (
                  <PaginationItem>
                    <PaginationLink
                      href={pager.link}
                      isActive={pager.active}
                      className="rounded-full"
                    >
                      {pager.page}
                    </PaginationLink>
                  </PaginationItem>
                );
              })}
            </PaginationContent>
          </Pagination>
        </div>
      )
    }
  </main>
</BlogLayout>
