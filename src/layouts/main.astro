---
import { ClientRouter, fade } from 'astro:transitions';
import { getLocalizedPathname } from 'astro-react-i18next/utils';
import { SEO } from 'astro-seo';
import i18n from 'i18next';
import { FAB } from '@/components/hoc/fab';
import { getThemeConfig } from '@/config/theme';
import { print } from '@/lib/print';

import '../styles/global.css';

const { content } = Astro.props;
const config = getThemeConfig(i18n.language);
const title = print(config.site?.separator, content.title, config.site?.title);
const description =
  content.description || config.site?.description || config.site?.description || c || '';

// SEO 相关配置
const canonicalUrl = new URL(Astro.url.pathname, Astro.site).toString();
const rssLink = new URL(getLocalizedPathname('/rss.xml', i18n.language), Astro.site).toString();

// Open Graph 图片配置
const ogImage = content.image
  ? new URL(content.image, Astro.site).toString()
  : new URL('/images/og-default.jpg', Astro.site).toString();

// 文章相关的 SEO 数据
const isArticle = Boolean(content.date || content.category);
const publishedTime = content.date ? new Date(content.date).toISOString() : undefined;
const modifiedTime = content.updated ? new Date(content.updated).toISOString() : undefined;
const articleSection = content.category;
const articleTags = content.tags || [];
const articleAuthors = [config.profile?.name || config.site?.author || 'Caster'];

console.log('debug1 description', description);
---

<html lang={i18n.language} transition:name="root" transition:animate={fade({ duration: '0.05s' })}>
  <head>
    <ClientRouter />
    <meta name="viewport" content="width=device-width" />
    <SEO
      title={title}
      description={description}
      canonical={canonicalUrl}
      charset="UTF-8"
      languageAlternates={[
        { href: canonicalUrl.replace('/zh-CN/', '/en-US/'), hrefLang: 'en-US' },
        { href: canonicalUrl.replace('/en-US/', '/zh-CN/'), hrefLang: 'zh-CN' },
        { href: canonicalUrl, hrefLang: 'x-default' },
      ]}
      openGraph={{
        basic: {
          title: content.title || title,
          type: isArticle ? 'article' : 'website',
          image: ogImage,
          url: canonicalUrl,
        },
        optional: {
          description: description,
          siteName: config.site?.title || '荡れ',
          locale: i18n.language === 'zh-CN' ? 'zh_CN' : 'en_US',
          localeAlternate: i18n.language === 'zh-CN' ? ['en_US'] : ['zh_CN'],
        },
        ...(isArticle && {
          article: {
            publishedTime,
            modifiedTime,
            authors: articleAuthors,
            section: articleSection,
            tags: articleTags,
          },
        }),
        image: {
          alt: content.title || title,
          type: 'image/jpeg',
          width: 1200,
          height: 630,
        },
      }}
      twitter={{
        card: 'summary_large_image',
        site: config.site?.title,
        title: content.title || title,
        description: description,
        image: ogImage,
        imageAlt: content.title || title,
      }}
      extend={{
        link: [{ rel: 'icon', href: '/images/favicon.ico' }],
        meta: [
          // 基础 meta 标签
          { name: 'author', content: config.site?.author || '' },
          {
            name: 'keywords',
            content: (content.tags || config.site?.keywords || []).join(', '),
          },
          { name: 'robots', content: 'index, follow' },

          // 移动端优化
          { name: 'format-detection', content: 'telephone=no' },
          { name: 'mobile-web-app-capable', content: 'yes' },
          { name: 'apple-mobile-web-app-capable', content: 'yes' },
          { name: 'apple-mobile-web-app-status-bar-style', content: 'black-translucent' },

          // 主题色彩
          { name: 'theme-color', content: '#1f2937' },
          { name: 'msapplication-TileColor', content: '#1f2937' },

          // 版权和生成器
          { name: 'copyright', content: config.site?.copyright || '' },

          // 文章特定的 meta 标签
          ...(isArticle
            ? [
                { property: 'article:author', content: config.profile?.name || 'Caster' },
                ...(publishedTime
                  ? [{ property: 'article:published_time', content: publishedTime }]
                  : []),
                ...(modifiedTime
                  ? [{ property: 'article:modified_time', content: modifiedTime }]
                  : []),
                ...(articleSection
                  ? [{ property: 'article:section', content: articleSection }]
                  : []),
                ...articleTags.map((tag: string) => ({ property: 'article:tag', content: tag })),
              ]
            : []),
        ],
      }}
    />
    <link rel="alternate" type="application/rss+xml" title={config.site?.title} href={rssLink} />
    <script>
      (function () {
        try {
          var cookies = document.cookie ? document.cookie.split('; ') : [];
          var theme = null;
          for (var i = 0; i < cookies.length; i++) {
            var parts = cookies[i].split('=');
            var name = decodeURIComponent(parts[0]);
            if (name === 'theme') {
              theme = decodeURIComponent(parts.slice(1).join('='));
              break;
            }
          }
          if (theme === 'dark' || theme === 'light') {
            var isDark = theme === 'dark';
            var root = document.documentElement;
            if (isDark) {
              root.classList.add('dark');
            } else {
              root.classList.remove('dark');
            }
          } else {
            var mql = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)');
            var preferDark = !!(mql && mql.matches);
            var rootEl = document.documentElement;
            if (preferDark) {
              rootEl.classList.add('dark');
            } else {
              rootEl.classList.remove('dark');
            }
          }
        } catch (e) {
          // Ignore any script errors to avoid blocking initial render
        }
      })();
    </script>
  </head>
  <body>
    <slot />

    <FAB client:only />
  </body>
</html>
