---
import i18n, { t } from 'i18next';
import { PortfolioCard } from '@/components/portfolio/portfolio-card';
import { Empty, EmptyContent, EmptyHeader, EmptyMedia } from '@/components/ui/empty';
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';
import { getFilterLink, getPaginateLink } from '@/lib/link';
import { buildPager } from '@/lib/pagination';
import type { PortfolioWithLink } from '@/lib/portfolios';
import BlogLayout from './blog.astro';

interface Props {
  items: PortfolioWithLink[];

  title?: string;
  description?: string;
  baseLink: string;
  filters?: string[];
  filter?: string;

  pagination: {
    current: number;
    total: number;
  };
}

const props = Astro.props as Props;

const {
  items,
  title = i18n.t('Portfolios'),
  description,
  pagination,

  baseLink,
  filter,
} = props;

const makePaginateLink = (page: number) => {
  const link = filter
    ? getFilterLink({
        base: baseLink,
        filter: filter,
      })
    : baseLink;

  return getPaginateLink({ link, page });
};

const pagers = buildPager(pagination.current, pagination.total, makePaginateLink);
---

<BlogLayout content={{ title, description }}>
  <main class="mx-auto p-6 max-w-6xl">
    {
      items.length === 0 && (
        <Empty>
          <EmptyHeader>
            <EmptyMedia variant="icon">
              <span class="size-6 icon-[tabler--box-multiple]" />
            </EmptyMedia>
            <EmptyContent>{t('No data yet')}</EmptyContent>
          </EmptyHeader>
        </Empty>
      )
    }

    {
      items.length > 0 && (
        <div class="gap-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
          {items.map((portfolio) => (
            <PortfolioCard portfolio={portfolio} client:load />
          ))}
        </div>
      )
    }

    {
      pagination.total > 1 && (
        <div class="mt-8">
          <Pagination>
            <PaginationContent>
              {pagers.map((pager) => {
                if (pager.disabled) {
                  return null;
                }
                if (pager.type === 'prev') {
                  return (
                    <PaginationItem>
                      <PaginationPrevious
                        href={pager.disabled ? undefined : pager.link}
                        aria-disabled={pager.disabled}
                        className="!px-2.5 rounded-full"
                      />
                    </PaginationItem>
                  );
                }
                if (pager.type === 'next') {
                  return (
                    <PaginationItem>
                      <PaginationNext
                        href={pager.disabled ? undefined : pager.link}
                        aria-disabled={pager.disabled}
                        className="!px-2.5 rounded-full"
                      />
                    </PaginationItem>
                  );
                }
                if (pager.type === 'ellipsis') {
                  return (
                    <PaginationItem>
                      <PaginationEllipsis />
                    </PaginationItem>
                  );
                }
                return (
                  <PaginationItem>
                    <PaginationLink
                      href={pager.link}
                      isActive={pager.active}
                      className="rounded-full"
                    >
                      {pager.page}
                    </PaginationLink>
                  </PaginationItem>
                );
              })}
            </PaginationContent>
          </Pagination>
        </div>
      )
    }
  </main>
</BlogLayout>
